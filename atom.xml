<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>主人忘归客不发</title>
  
  <subtitle>欲语迟</subtitle>
  <link href="http://quruipeng666.github.io/atom.xml" rel="self"/>
  
  <link href="http://quruipeng666.github.io/"/>
  <updated>2024-03-17T08:43:31.842Z</updated>
  <id>http://quruipeng666.github.io/</id>
  
  <author>
    <name>GameDesignerQ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>泛型容器一一字典</title>
    <link href="http://quruipeng666.github.io/2024/03/17/%E6%B3%9B%E5%9E%8B%E5%AE%B9%E5%99%A8%E4%B8%80%E4%B8%80%E5%AD%97%E5%85%B8/"/>
    <id>http://quruipeng666.github.io/2024/03/17/%E6%B3%9B%E5%9E%8B%E5%AE%B9%E5%99%A8%E4%B8%80%E4%B8%80%E5%AD%97%E5%85%B8/</id>
    <published>2024-03-17T08:22:09.000Z</published>
    <updated>2024-03-17T08:43:31.842Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>泛型容器，存储键&#x2F;值对的数据的集合。键&#x2F;值对的类型必须是预先定义好的，类型安全。</p><h3 id="字典的定义"><a href="#字典的定义" class="headerlink" title="字典的定义"></a>字典的定义</h3><p>使用字典需要引用using System.Collections.Generic;</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化一个key是string类型，value也是string型的字典</span></span><br><span class="line">Dictionary&lt;<span class="built_in">string</span>,<span class="built_in">string</span>&gt; dic1 = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>,<span class="built_in">string</span>&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加</span></span><br><span class="line">dic1.Add(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;100&quot;</span>);</span><br><span class="line">dic1.Add(<span class="string">&quot;2&quot;</span>,<span class="string">&quot;200&quot;</span>);</span><br><span class="line">dic1.Add(<span class="string">&quot;3&quot;</span>,<span class="string">&quot;300&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否存在键</span></span><br><span class="line"><span class="keyword">if</span>(dic1.ContainsKey(<span class="string">&quot;1&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//打印（存在&quot;1&quot;键）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改</span></span><br><span class="line">dic1[<span class="string">&quot;1&quot;</span>] = <span class="string">&quot;1000&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历，另一种取出所有键方式也行</span></span><br><span class="line"><span class="keyword">foreach</span>(KeyValuePair&lt;<span class="built_in">string</span>,<span class="built_in">string</span>&gt; kvp <span class="keyword">in</span> dic1)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//打印每一对 键/值对 的 kvp.Key 和 kvp.Value</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//移除</span></span><br><span class="line">dic1.Remove(<span class="string">&quot;2&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//清空</span></span><br><span class="line">dic1.Clear();</span><br></pre></td></tr></table></figure><p>字典跟哈希表的使用方式非常像</p><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>字典定义时需要是泛型，需要指定好类型，这样的话在使用的时候就没有装箱拆箱类型转换那一步，执行效率非常高。<br>哈希表在Add（key，value）时都是object类型的，必须会多了装箱拆箱类型转换这个操作，执行效率会低一些。</p><h3 id="了解概念"><a href="#了解概念" class="headerlink" title="了解概念"></a>了解概念</h3><p>线程安全，线程不安全。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;字典&quot;&gt;&lt;a href=&quot;#字典&quot; class=&quot;headerlink&quot; title=&quot;字典&quot;&gt;&lt;/a&gt;字典&lt;/h2&gt;&lt;p&gt;泛型容器，存储键&amp;#x2F;值对的数据的集合。键&amp;#x2F;值对的类型必须是预先定义好的，类型安全。&lt;/p&gt;
&lt;h3 id=&quot;字典的定义&quot;&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>哈希table一一Hashtable</title>
    <link href="http://quruipeng666.github.io/2024/03/17/%E5%93%88%E5%B8%8Ctable%E4%B8%80%E4%B8%80Hashtable/"/>
    <id>http://quruipeng666.github.io/2024/03/17/%E5%93%88%E5%B8%8Ctable%E4%B8%80%E4%B8%80Hashtable/</id>
    <published>2024-03-17T08:02:36.000Z</published>
    <updated>2024-03-17T08:20:41.483Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h2><p>中文全称叫 哈希表。它是一个集合容器。Hashtable类代表了基于键的哈希代码组织起来的 键&#x2F;值 对 的集合。</p><p>每存储一个元素，都有一个键以及这个键所对应的一个值，也叫键&#x2F;值对，它使用键来访问集合中的元素。</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化定义</span></span><br><span class="line">Hashtable ht1 = <span class="keyword">new</span> Hashtable();</span><br><span class="line"></span><br><span class="line"><span class="comment">//类型不安全，key(键)，value(值)都是Object类型。</span></span><br><span class="line">ht1.Add(<span class="string">&quot;1&quot;</span>,<span class="number">100</span>);</span><br><span class="line">ht1.Add(<span class="number">1</span>,<span class="number">99</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//清空操作，ht1.Clear();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ht1.ContainsKey(&quot;1&quot;);判断有没有&quot;1&quot;这个键，如果有返回true，反之false。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ht1.Count有几对键值对，这里是2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//移除操作，ht1.Remove(&quot;1&quot;);参数是key(键)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//比如我们想取出字符串&quot;1&quot;键的值，就写ht1[&quot;1&quot;]</span></span><br><span class="line"><span class="comment">//比如我们想取出int型1键的值，就写ht1[1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//比如我们想修改int型1键的值为999，就写ht1[1]=999;如果有int型1键的话才能改，否则会出现异常。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line">ICollection key=ht1.Keys;<span class="comment">//所有键</span></span><br><span class="line"><span class="keyword">foreach</span>(<span class="keyword">var</span> k <span class="keyword">in</span> key)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//打印ht1[k]，每一个值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Hashtable&quot;&gt;&lt;a href=&quot;#Hashtable&quot; class=&quot;headerlink&quot; title=&quot;Hashtable&quot;&gt;&lt;/a&gt;Hashtable&lt;/h2&gt;&lt;p&gt;中文全称叫 哈希表。它是一个集合容器。Hashtable类代表了基于键的哈希代码组织</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>泛型类集合一一List</title>
    <link href="http://quruipeng666.github.io/2024/03/17/%E6%B3%9B%E5%9E%8B%E7%B1%BB%E9%9B%86%E5%90%88%E4%B8%80%E4%B8%80List/"/>
    <id>http://quruipeng666.github.io/2024/03/17/%E6%B3%9B%E5%9E%8B%E7%B1%BB%E9%9B%86%E5%90%88%E4%B8%80%E4%B8%80List/</id>
    <published>2024-03-17T06:49:06.000Z</published>
    <updated>2024-03-17T07:05:13.544Z</updated>
    
    <content type="html"><![CDATA[<h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>也是一种容器，泛型类集合。对于List来说，往往会和泛型配合使用，List&lt;&gt;。</p><p>功能和作用类似于 ArrayList。List比ArrayList出现得晚一些，是具有更好的功能。</p><p>ArrayList不是指定固定类型的，实际上它的参数是Object类型，也就是说不管我们使用的是int，string还是我们定义的一个类，拿它作为ArrayList的参数的时候，都必须要通过一个装箱和拆箱的操作，同时还要再完成类型转换。</p><p>装箱，拆箱，类型转换是有一定的性能消耗，如果我们使用List，由于它是一个泛型，用的时候必须要指定某一种具体类型，那么它就无需装箱，拆箱，类型转换。</p><p>由此它类型安全，不会出现不同类型之间所产生的一些异常的问题。</p><h3 id="声明List"><a href="#声明List" class="headerlink" title="声明List"></a>声明List</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line">List&lt;<span class="built_in">int</span>&gt; list1 = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//List定义的&lt;int&gt;，只能添加int型元素，类型安全。ArrayList类型不安全。</span></span><br><span class="line">list1.Add(<span class="number">1</span>);</span><br><span class="line">list1.Add(<span class="number">2</span>);</span><br><span class="line">list1.Add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//list1.Count长度为3</span></span><br><span class="line"><span class="comment">//list1.Clear();  list1.Contains();  list1.Insert();  list1.InsertRange();  list1.Remove();</span></span><br><span class="line"><span class="comment">//通过for循环，foreach也能进行遍历</span></span><br><span class="line"><span class="comment">//list1.Sort();  list1.Reverse();  list1.IndexOf();</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;List&quot;&gt;&lt;a href=&quot;#List&quot; class=&quot;headerlink&quot; title=&quot;List&quot;&gt;&lt;/a&gt;List&lt;/h2&gt;&lt;p&gt;也是一种容器，泛型类集合。对于List来说，往往会和泛型配合使用，List&amp;lt;&amp;gt;。&lt;/p&gt;
&lt;p&gt;功能和作用类似于</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>arraylist的学习</title>
    <link href="http://quruipeng666.github.io/2024/03/15/arraylist%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <id>http://quruipeng666.github.io/2024/03/15/arraylist%E7%9A%84%E5%AD%A6%E4%B9%A0/</id>
    <published>2024-03-15T15:14:13.000Z</published>
    <updated>2024-03-15T15:58:17.244Z</updated>
    
    <content type="html"><![CDATA[<h2 id="arraylist"><a href="#arraylist" class="headerlink" title="arraylist"></a>arraylist</h2><p>一种新的容器，动态数组，关于 ※对象的有序集合※ 。跟数组的作用很接近，都是用来存储对象的，而且都是一个有序的集合。</p><p>数组是固定的长度，对于动态数组来说，就解决了数组只能固定长度的缺点，动态数组有自己的一个 ※自动重新调整大小※ 的能力。</p><p>同时，我们也 ※可以通过这个索引位在动态数组里面去插入，删除等的操作※ 。数组不能够，数组的位置是固定的，我们只能取或改数组，但是不能够在数组中间随意地去插入或者删除新的元素。</p><p>所以我们就知道了动态数组跟数组最大的一个区别。</p><p>在使用方面呢，跟数组的这个形式实际上是很像的。</p><h3 id="动态数组的定义"><a href="#动态数组的定义" class="headerlink" title="动态数组的定义"></a>动态数组的定义</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对动态数组初始化的定义</span></span><br><span class="line">ArrayList arraylist1 = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line">arraylist1.Add(<span class="number">45</span>);</span><br><span class="line">arraylist1.Add(<span class="number">25</span>);</span><br><span class="line">arraylist1.Add(<span class="number">12</span>);</span><br><span class="line"><span class="comment">//arraylist1[0]就是第一个值，45。依此类推，arraylist1[1]是25，arraylist1[2]是12。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种方式</span></span><br><span class="line"><span class="built_in">int</span>[] array1 = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">4</span>] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">arraylist1.AddRange(array1);</span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="keyword">foreach</span>(<span class="keyword">var</span> v <span class="keyword">in</span> arraylist1)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//打印v，结果分别是45，25，12，1，2，3，4。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清空，删除全部值</span></span><br><span class="line">arraylist1.Clear();</span><br><span class="line"></span><br><span class="line"><span class="comment">//用arraylist1.Contains(12)可以判断arraylist1里是否包含12这个值，如果包含返回true，反之false。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//IndexOf()方法返回参数第一次出现的下标值，没找到返回-1</span></span><br><span class="line">ArrayList arraylist2 = <span class="keyword">new</span> ArrayList();</span><br><span class="line"><span class="built_in">int</span>[] array2 = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">7</span>] &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">12</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">12</span>&#125;;</span><br><span class="line">arraylist2.IndexOf(<span class="number">12</span>);  <span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Insert()插入方法,第一参数你从什么索引开始插入，第二参数你要插入什么元素。第一参数索引位得存在，不存在会报错。</span></span><br><span class="line">arraylist2.Insert(<span class="number">3</span>,<span class="number">66</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Remove()删除方法，参数就是元素的值，会删除第一次出现的匹配值，如果没有匹配值，相当于没起作用。</span></span><br><span class="line">arraylist2.Remove(<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//arraylist2[100] = 12;无法执行，100这个索引没被分配，索引引用不到，产生错误。如果这样写一定保证有那么多元素，如果不够的话只能使用Add的方式。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Reverse()逆转顺序方法</span></span><br><span class="line">arraylist2.Reverse();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Sort()排序方法，对于这种数值型的元素，是可以进行排序的。从小到大排序。</span></span><br><span class="line">arraylist2.Sort();</span><br></pre></td></tr></table></figure><h3 id="方法的重载，依据方法传入参数的数量或类型不同，调用的不同功能实现的同名方法"><a href="#方法的重载，依据方法传入参数的数量或类型不同，调用的不同功能实现的同名方法" class="headerlink" title="方法的重载，依据方法传入参数的数量或类型不同，调用的不同功能实现的同名方法"></a>方法的重载，依据方法传入参数的数量或类型不同，调用的不同功能实现的同名方法</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;arraylist&quot;&gt;&lt;a href=&quot;#arraylist&quot; class=&quot;headerlink&quot; title=&quot;arraylist&quot;&gt;&lt;/a&gt;arraylist&lt;/h2&gt;&lt;p&gt;一种新的容器，动态数组，关于 ※对象的有序集合※ 。跟数组的作用很接近，都是用来存储</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>数组的学习</title>
    <link href="http://quruipeng666.github.io/2024/03/15/%E6%95%B0%E7%BB%84%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <id>http://quruipeng666.github.io/2024/03/15/%E6%95%B0%E7%BB%84%E7%9A%84%E5%AD%A6%E4%B9%A0/</id>
    <published>2024-03-15T09:16:13.000Z</published>
    <updated>2024-03-15T09:18:40.625Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>是用来存储数据的集合。数组是要指定长度的。</p><h3 id="数组的特性："><a href="#数组的特性：" class="headerlink" title="数组的特性："></a>数组的特性：</h3><p>1.元素类型相同</p><p>2.固定长度</p><p>3.顺序存储的集合</p><h3 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a>数组的定义</h3><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//定义int类型的数组</span></span><br><span class="line"><span class="built_in">int</span>[] array1;</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接定义初始化存储</span></span><br><span class="line"><span class="built_in">int</span>[] array2 = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">3</span>]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接写值，array3长度是5并且长度不能变</span></span><br><span class="line"><span class="built_in">int</span>[] array3 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代表当前这个int型数组只能存储3个int型的变量,默认值是0</span></span><br><span class="line">array1 = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//array1的第一个值就是array1[0]</span></span><br><span class="line">array1[<span class="number">0</span>] = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//array1只给分配了三个空间，array1[3]是第四个值，拿不到的，如果这样写在编译期间不会报错，在运行期间会产生一个数组越界的错误。</span></span><br><span class="line"><span class="comment">//array1.Length的值就是3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组的遍历</span></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;array3.Length;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//打印array3[i]的值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用foreach遍历</span></span><br><span class="line"><span class="keyword">foreach</span>(<span class="keyword">var</span> v <span class="keyword">in</span> array2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//打印v的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h2&gt;&lt;p&gt;是用来存储数据的集合。数组是要指定长度的。&lt;/p&gt;
&lt;h3 id=&quot;数组的特性：&quot;&gt;&lt;a href=&quot;#数组的特性：&quot; class=&quot;hea</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>每日一刷一一Csharp面试题</title>
    <link href="http://quruipeng666.github.io/2024/03/14/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B7%E4%B8%80%E4%B8%80Csharp%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://quruipeng666.github.io/2024/03/14/%E6%AF%8F%E6%97%A5%E4%B8%80%E5%88%B7%E4%B8%80%E4%B8%80Csharp%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2024-03-14T14:03:00.000Z</published>
    <updated>2024-03-14T14:03:29.514Z</updated>
    
    <content type="html"><![CDATA[<h2 id="C-面试题两道"><a href="#C-面试题两道" class="headerlink" title="C#面试题两道"></a>C#面试题两道</h2><h3 id="值类型和引用类型有什么区别？"><a href="#值类型和引用类型有什么区别？" class="headerlink" title="值类型和引用类型有什么区别？"></a>值类型和引用类型有什么区别？</h3><p>值类型：包含了所有简单类型（整数、浮点、bool、char）、struct、enum。</p><p>继承自System.ValueType</p><p>引用类型：包含了string，object，class，interface，delegate，array</p><p>继承自System.Object</p><p>1.值类型存储在内存栈中，引用类型数据存储在内存堆中，而内存单元中存放的是堆中存放的地址。</p><p>2.值类型存取快，引用类型存取慢。</p><p>3.值类型表示实际数据，引用类型表示指向存储在内存堆中的数据的指针和引用。</p><p>4.栈的内存是自动释放的，堆内存是.NET 中会由 GC 来自动释放。</p><p>5.值类型继承自 System.ValueType,引用类型继承自 System.Object。</p><p>6.值类型直接存放实际的数据，⽽引⽤类型存放的则是数据的地址，即对象的引⽤。</p><p>7.值类型变量直接把变量的值保存在堆栈中，引⽤类型的变量把实际数据的地址保存在堆栈中。</p><h3 id="什么是匿名方法？"><a href="#什么是匿名方法？" class="headerlink" title="什么是匿名方法？"></a>什么是匿名方法？</h3><p>匿名⽅法是⽤作委托的参数的⼀段代码。</p><p>举例子</p><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//匿名方法，例1</span></span><br><span class="line">Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt; anon = <span class="built_in">delegate</span>(<span class="built_in">int</span> i)</span><br><span class="line">&#123;</span><br><span class="line">i = i + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//输出2</span></span><br><span class="line">Console.WriteLine(anon(<span class="number">1</span>));</span><br><span class="line"><span class="comment">//匿名方法，例2</span></span><br><span class="line">Action&lt;<span class="built_in">int</span>&gt; anon2 = <span class="built_in">delegate</span>(<span class="built_in">int</span> i)</span><br><span class="line">&#123;</span><br><span class="line">i = i + <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//输出2</span></span><br><span class="line">Console.WriteLine(anon(<span class="number">1</span>));</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;C-面试题两道&quot;&gt;&lt;a href=&quot;#C-面试题两道&quot; class=&quot;headerlink&quot; title=&quot;C#面试题两道&quot;&gt;&lt;/a&gt;C#面试题两道&lt;/h2&gt;&lt;h3 id=&quot;值类型和引用类型有什么区别？&quot;&gt;&lt;a href=&quot;#值类型和引用类型有什么区别？&quot; cla</summary>
      
    
    
    
    
  </entry>
  
</feed>
